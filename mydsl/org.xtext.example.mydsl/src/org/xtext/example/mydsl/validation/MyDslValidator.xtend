/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.validation

import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.EcoreUtil2
import org.xtext.example.mydsl.myDsl.EntityRoot
import org.xtext.example.mydsl.myDsl.Inheritance
import org.xtext.example.mydsl.myDsl.MyDslPackage

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MyDslValidator extends AbstractMyDslValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
	@Check
	def checkSelfInheritance(Inheritance relation) {
		val root = EcoreUtil2.getContainerOfType(relation, EntityRoot)
		val inheritance = root.relations.filter(Inheritance)
		val visitedEntities = newHashSet(relation.baseEntity)
		var current = relation.superEntity
		while (current !== null) {
			if (visitedEntities.contains(current)) {
				error("cycle", MyDslPackage.Literals.INHERITANCE__SUPER_ENTITY)
				return
			}
			val nextEntity = current
			val nextInheritance = inheritance.findFirst[baseEntity == nextEntity]
			current = nextInheritance.superEntity
			visitedEntities.add(nextInheritance.baseEntity)
		}
	}
}
