/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.example.mydsl.myDsl.Require
import org.eclipse.xtext.EcoreUtil2
import org.xtext.example.mydsl.myDsl.Inheritance
import org.xtext.example.mydsl.myDsl.Entity
import org.xtext.example.mydsl.myDsl.EntityRoot
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MyDslScopeProvider extends AbstractMyDslScopeProvider {
	
	override getScope(EObject context, EReference reference) {
		switch(context) {
			Require: return context.getScope
		}
		super.getScope(context, reference)
	}
	
	def IScope getScope(Require require) {
		val entity = EcoreUtil2.getContainerOfType(require, Entity)
		val root = EcoreUtil2.getContainerOfType(entity, EntityRoot)
		val inheritance = root.relations.filter(Inheritance).findFirst[baseEntity==entity]
		if (inheritance === null) {
			Scopes.scopeFor(entity.attributes)
		} else {
			Scopes.scopeFor(entity.attributes, Scopes.scopeFor(inheritance.superEntity.attributes))
		}
	}
}
