/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Association_AKeyword_4_0_q;
	protected AbstractElementAlias match_Association_HasKeyword_3_0_or_HaveKeyword_3_1;
	protected AbstractElementAlias match_Association___AKeyword_1_0_or_ManyKeyword_1_1__a;
	protected AbstractElementAlias match_Association___ManyKeyword_4_1_q_AKeyword_4_0_q__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Association_AKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getAssociationAccess().getAKeyword_4_0());
		match_Association_HasKeyword_3_0_or_HaveKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAssociationAccess().getHasKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getAssociationAccess().getHaveKeyword_3_1()));
		match_Association___AKeyword_1_0_or_ManyKeyword_1_1__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getAssociationAccess().getAKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAssociationAccess().getManyKeyword_1_1()));
		match_Association___ManyKeyword_4_1_q_AKeyword_4_0_q__a = new GroupAlias(true, true, new TokenAlias(false, true, grammarAccess.getAssociationAccess().getManyKeyword_4_1()), new TokenAlias(false, true, grammarAccess.getAssociationAccess().getAKeyword_4_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Association_AKeyword_4_0_q.equals(syntax))
				emit_Association_AKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Association_HasKeyword_3_0_or_HaveKeyword_3_1.equals(syntax))
				emit_Association_HasKeyword_3_0_or_HaveKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Association___AKeyword_1_0_or_ManyKeyword_1_1__a.equals(syntax))
				emit_Association___AKeyword_1_0_or_ManyKeyword_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Association___ManyKeyword_4_1_q_AKeyword_4_0_q__a.equals(syntax))
				emit_Association___ManyKeyword_4_1_q_AKeyword_4_0_q__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'a'?
	 *
	 * This ambiguous syntax occurs at:
	 *     from=ID ('has' | 'have') (ambiguity) ('many'? (ambiguity))* to=ID
	 
	 * </pre>
	 */
	protected void emit_Association_AKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'has' | 'have'
	 *
	 * This ambiguous syntax occurs at:
	 *     from=ID (ambiguity) 'a'? ('many'? 'a'?)* to=ID
	 
	 * </pre>
	 */
	protected void emit_Association_HasKeyword_3_0_or_HaveKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('a' | 'many')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'relation' (ambiguity) from=ID
	 
	 * </pre>
	 */
	protected void emit_Association___AKeyword_1_0_or_ManyKeyword_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('many'? 'a'?)*
	 *
	 * This ambiguous syntax occurs at:
	 *     from=ID ('has' | 'have') 'a'? (ambiguity) to=ID
	 
	 * </pre>
	 */
	protected void emit_Association___ManyKeyword_4_1_q_AKeyword_4_0_q__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
