/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.validation;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.HashSet;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.mydsl.myDsl.Entity;
import org.xtext.example.mydsl.myDsl.EntityRoot;
import org.xtext.example.mydsl.myDsl.Inheritance;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class MyDslValidator extends AbstractMyDslValidator {
  @Check
  public void checkSelfInheritance(final Inheritance relation) {
    final EntityRoot root = EcoreUtil2.<EntityRoot>getContainerOfType(relation, EntityRoot.class);
    final Iterable<Inheritance> inheritance = Iterables.<Inheritance>filter(root.getRelations(), Inheritance.class);
    final HashSet<Entity> visitedEntities = CollectionLiterals.<Entity>newHashSet(relation.getBaseEntity());
    Entity current = relation.getSuperEntity();
    while ((current != null)) {
      {
        boolean _contains = visitedEntities.contains(current);
        if (_contains) {
          this.error("cycle", MyDslPackage.Literals.INHERITANCE__SUPER_ENTITY);
          return;
        }
        final Entity nextEntity = current;
        final Function1<Inheritance, Boolean> _function = (Inheritance it) -> {
          Entity _baseEntity = it.getBaseEntity();
          return Boolean.valueOf(Objects.equal(_baseEntity, nextEntity));
        };
        final Inheritance nextInheritance = IterableExtensions.<Inheritance>findFirst(inheritance, _function);
        current = nextInheritance.getSuperEntity();
        visitedEntities.add(nextInheritance.getBaseEntity());
      }
    }
  }
}
