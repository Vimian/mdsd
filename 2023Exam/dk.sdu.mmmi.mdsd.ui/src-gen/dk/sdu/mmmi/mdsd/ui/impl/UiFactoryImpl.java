/**
 * generated by Xtext 2.33.0
 */
package dk.sdu.mmmi.mdsd.ui.impl;

import dk.sdu.mmmi.mdsd.ui.And;
import dk.sdu.mmmi.mdsd.ui.Button;
import dk.sdu.mmmi.mdsd.ui.Column;
import dk.sdu.mmmi.mdsd.ui.Element;
import dk.sdu.mmmi.mdsd.ui.Equals;
import dk.sdu.mmmi.mdsd.ui.Exp;
import dk.sdu.mmmi.mdsd.ui.Form;
import dk.sdu.mmmi.mdsd.ui.Greater;
import dk.sdu.mmmi.mdsd.ui.GreaterOrEqual;
import dk.sdu.mmmi.mdsd.ui.HashStringType;
import dk.sdu.mmmi.mdsd.ui.Input;
import dk.sdu.mmmi.mdsd.ui.InputUse;
import dk.sdu.mmmi.mdsd.ui.Label;
import dk.sdu.mmmi.mdsd.ui.Layout;
import dk.sdu.mmmi.mdsd.ui.Less;
import dk.sdu.mmmi.mdsd.ui.LessOrEqual;
import dk.sdu.mmmi.mdsd.ui.NotEqual;
import dk.sdu.mmmi.mdsd.ui.NumberType;
import dk.sdu.mmmi.mdsd.ui.Or;
import dk.sdu.mmmi.mdsd.ui.Row;
import dk.sdu.mmmi.mdsd.ui.StarButton;
import dk.sdu.mmmi.mdsd.ui.StringType;
import dk.sdu.mmmi.mdsd.ui.Type;
import dk.sdu.mmmi.mdsd.ui.UI23;
import dk.sdu.mmmi.mdsd.ui.UiFactory;
import dk.sdu.mmmi.mdsd.ui.UiPackage;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class UiFactoryImpl extends EFactoryImpl implements UiFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static UiFactory init()
  {
    try
    {
      UiFactory theUiFactory = (UiFactory)EPackage.Registry.INSTANCE.getEFactory(UiPackage.eNS_URI);
      if (theUiFactory != null)
      {
        return theUiFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new UiFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UiFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case UiPackage.UI23: return createUI23();
      case UiPackage.FORM: return createForm();
      case UiPackage.LAYOUT: return createLayout();
      case UiPackage.COLUMN: return createColumn();
      case UiPackage.ROW: return createRow();
      case UiPackage.ELEMENT: return createElement();
      case UiPackage.LABEL: return createLabel();
      case UiPackage.INPUT: return createInput();
      case UiPackage.BUTTON: return createButton();
      case UiPackage.TYPE: return createType();
      case UiPackage.EXP: return createExp();
      case UiPackage.INPUT_USE: return createInputUse();
      case UiPackage.STAR_BUTTON: return createStarButton();
      case UiPackage.STRING_TYPE: return createStringType();
      case UiPackage.HASH_STRING_TYPE: return createHashStringType();
      case UiPackage.NUMBER_TYPE: return createNumberType();
      case UiPackage.AND: return createAnd();
      case UiPackage.OR: return createOr();
      case UiPackage.EQUALS: return createEquals();
      case UiPackage.NOT_EQUAL: return createNotEqual();
      case UiPackage.LESS: return createLess();
      case UiPackage.LESS_OR_EQUAL: return createLessOrEqual();
      case UiPackage.GREATER: return createGreater();
      case UiPackage.GREATER_OR_EQUAL: return createGreaterOrEqual();
      case UiPackage.NUMBER: return createNumber();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UI23 createUI23()
  {
    UI23Impl ui23 = new UI23Impl();
    return ui23;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Form createForm()
  {
    FormImpl form = new FormImpl();
    return form;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Layout createLayout()
  {
    LayoutImpl layout = new LayoutImpl();
    return layout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Column createColumn()
  {
    ColumnImpl column = new ColumnImpl();
    return column;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Row createRow()
  {
    RowImpl row = new RowImpl();
    return row;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Label createLabel()
  {
    LabelImpl label = new LabelImpl();
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Input createInput()
  {
    InputImpl input = new InputImpl();
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Button createButton()
  {
    ButtonImpl button = new ButtonImpl();
    return button;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp createExp()
  {
    ExpImpl exp = new ExpImpl();
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputUse createInputUse()
  {
    InputUseImpl inputUse = new InputUseImpl();
    return inputUse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StarButton createStarButton()
  {
    StarButtonImpl starButton = new StarButtonImpl();
    return starButton;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringType createStringType()
  {
    StringTypeImpl stringType = new StringTypeImpl();
    return stringType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HashStringType createHashStringType()
  {
    HashStringTypeImpl hashStringType = new HashStringTypeImpl();
    return hashStringType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberType createNumberType()
  {
    NumberTypeImpl numberType = new NumberTypeImpl();
    return numberType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equals createEquals()
  {
    EqualsImpl equals = new EqualsImpl();
    return equals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotEqual createNotEqual()
  {
    NotEqualImpl notEqual = new NotEqualImpl();
    return notEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Less createLess()
  {
    LessImpl less = new LessImpl();
    return less;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LessOrEqual createLessOrEqual()
  {
    LessOrEqualImpl lessOrEqual = new LessOrEqualImpl();
    return lessOrEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Greater createGreater()
  {
    GreaterImpl greater = new GreaterImpl();
    return greater;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterOrEqual createGreaterOrEqual()
  {
    GreaterOrEqualImpl greaterOrEqual = new GreaterOrEqualImpl();
    return greaterOrEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public dk.sdu.mmmi.mdsd.ui.Number createNumber()
  {
    NumberImpl number = new NumberImpl();
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UiPackage getUiPackage()
  {
    return (UiPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static UiPackage getPackage()
  {
    return UiPackage.eINSTANCE;
  }

} //UiFactoryImpl
