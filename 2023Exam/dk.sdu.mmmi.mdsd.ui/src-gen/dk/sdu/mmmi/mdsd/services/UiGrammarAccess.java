/*
 * generated by Xtext 2.33.0
 */
package dk.sdu.mmmi.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UiGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class UI23Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.UI23");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFormAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormFormParserRuleCall_2_0 = (RuleCall)cFormAssignment_2.eContents().get(0);
		
		//UI23: 'title' name=ID form=Form;
		@Override public ParserRule getRule() { return rule; }
		
		//'title' name=ID form=Form
		public Group getGroup() { return cGroup; }
		
		//'title'
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//form=Form
		public Assignment getFormAssignment_2() { return cFormAssignment_2; }
		
		//Form
		public RuleCall getFormFormParserRuleCall_2_0() { return cFormFormParserRuleCall_2_0; }
	}
	public class FormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.Form");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLayoutAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLayoutLayoutParserRuleCall_3_0 = (RuleCall)cLayoutAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Form:
		//    'form' name=ID '{' layout=Layout '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'form' name=ID '{' layout=Layout '}'
		public Group getGroup() { return cGroup; }
		
		//'form'
		public Keyword getFormKeyword_0() { return cFormKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//layout=Layout
		public Assignment getLayoutAssignment_3() { return cLayoutAssignment_3; }
		
		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_3_0() { return cLayoutLayoutParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.Layout");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColumnParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Layout:
		//    Column | Row
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Column | Row
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Column
		public RuleCall getColumnParserRuleCall_0() { return cColumnParserRuleCall_0; }
		
		//Row
		public RuleCall getRowParserRuleCall_1() { return cRowParserRuleCall_1; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Column:
		//    'column' '{'
		//        elements+=Element+
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'column' '{'
		//    elements+=Element+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'column'
		public Keyword getColumnKeyword_0() { return cColumnKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=Element+
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_2_0() { return cElementsElementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Row:
		//    'row' '{'
		//        elements+=Element+
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'row' '{'
		//    elements+=Element+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'row'
		public Keyword getRowKeyword_0() { return cRowKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=Element+
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_2_0() { return cElementsElementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cButtonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLayoutParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Element:
		//    Label | Input | Button | Layout
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Label | Input | Button | Layout
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Label
		public RuleCall getLabelParserRuleCall_0() { return cLabelParserRuleCall_0; }
		
		//Input
		public RuleCall getInputParserRuleCall_1() { return cInputParserRuleCall_1; }
		
		//Button
		public RuleCall getButtonParserRuleCall_2() { return cButtonParserRuleCall_2; }
		
		//Layout
		public RuleCall getLayoutParserRuleCall_3() { return cLayoutParserRuleCall_3; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Label:
		//    'label' ':' value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'label' ':' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'label'
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//Input:
		//    'input' name=ID ':' exp=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'input' name=ID ':' exp=Exp
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//exp=Exp
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_3_0() { return cExpExpParserRuleCall_3_0; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.Button");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cButtonKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStarButtonAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cButtonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_4_0 = (RuleCall)cValueAssignment_1_4.eContents().get(0);
		
		//Button:
		//    'button' name=ID ':' value=STRING | {StarButton}'button*' name=ID ':' value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'button' name=ID ':' value=STRING | {StarButton}'button*' name=ID ':' value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'button' name=ID ':' value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//'button'
		public Keyword getButtonKeyword_0_0() { return cButtonKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//value=STRING
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_3_0() { return cValueSTRINGTerminalRuleCall_0_3_0; }
		
		//{StarButton}'button*' name=ID ':' value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StarButton}
		public Action getStarButtonAction_1_0() { return cStarButtonAction_1_0; }
		
		//'button*'
		public Keyword getButtonKeyword_1_1() { return cButtonKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//value=STRING
		public Assignment getValueAssignment_1_4() { return cValueAssignment_1_4; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_4_0() { return cValueSTRINGTerminalRuleCall_1_4_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cValueStringKeyword_0_1_0 = (Keyword)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cHashStringTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cValueStringKeyword_1_1_0 = (Keyword)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNumberTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cValueNumberKeyword_2_1_0 = (Keyword)cValueAssignment_2_1.eContents().get(0);
		
		//Type:
		//    {StringType} value='string' | {HashStringType} value='#string'  | {NumberType}value='number'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} value='string' | {HashStringType} value='#string'  | {NumberType}value='number'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StringType} value='string'
		public Group getGroup_0() { return cGroup_0; }
		
		//{StringType}
		public Action getStringTypeAction_0_0() { return cStringTypeAction_0_0; }
		
		//value='string'
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//'string'
		public Keyword getValueStringKeyword_0_1_0() { return cValueStringKeyword_0_1_0; }
		
		//{HashStringType} value='#string'
		public Group getGroup_1() { return cGroup_1; }
		
		//{HashStringType}
		public Action getHashStringTypeAction_1_0() { return cHashStringTypeAction_1_0; }
		
		//value='#string'
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//'#string'
		public Keyword getValueStringKeyword_1_1_0() { return cValueStringKeyword_1_1_0; }
		
		//{NumberType}value='number'
		public Group getGroup_2() { return cGroup_2; }
		
		//{NumberType}
		public Action getNumberTypeAction_2_0() { return cNumberTypeAction_2_0; }
		
		//value='number'
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//'number'
		public Keyword getValueNumberKeyword_2_1_0() { return cValueNumberKeyword_2_1_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.Exp");
		private final RuleCall cBooleanExpParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Exp:
		//    BooleanExp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanExp
		public RuleCall getBooleanExpParserRuleCall() { return cBooleanExpParserRuleCall; }
	}
	public class BooleanExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.BooleanExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cAndLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightEqualityExpParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cOrLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightEqualityExpParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//BooleanExp returns Exp:
		//    EqualityExp (
		//        {And.left=current} '&&' right=EqualityExp |
		//        {Or.left=current} '||' right=EqualityExp
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExp (
		//    {And.left=current} '&&' right=EqualityExp |
		//    {Or.left=current} '||' right=EqualityExp
		//)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExp
		public RuleCall getEqualityExpParserRuleCall_0() { return cEqualityExpParserRuleCall_0; }
		
		//(
		//       {And.left=current} '&&' right=EqualityExp |
		//       {Or.left=current} '||' right=EqualityExp
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{And.left=current} '&&' right=EqualityExp
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0_0() { return cAndLeftAction_1_0_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0_1() { return cAmpersandAmpersandKeyword_1_0_1; }
		
		//right=EqualityExp
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//EqualityExp
		public RuleCall getRightEqualityExpParserRuleCall_1_0_2_0() { return cRightEqualityExpParserRuleCall_1_0_2_0; }
		
		//{Or.left=current} '||' right=EqualityExp
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_1_0() { return cOrLeftAction_1_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1_1() { return cVerticalLineVerticalLineKeyword_1_1_1; }
		
		//right=EqualityExp
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//EqualityExp
		public RuleCall getRightEqualityExpParserRuleCall_1_1_2_0() { return cRightEqualityExpParserRuleCall_1_1_2_0; }
	}
	public class EqualityExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.EqualityExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLessGreaterExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cEqualsLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightLessGreaterExpParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cNotEqualLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightLessGreaterExpParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//EqualityExp returns Exp:
		//    LessGreaterExp (
		//        {Equals.left=current} '==' right=LessGreaterExp |
		//        {NotEqual.left=current} '!=' right=LessGreaterExp
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LessGreaterExp (
		//    {Equals.left=current} '==' right=LessGreaterExp |
		//    {NotEqual.left=current} '!=' right=LessGreaterExp
		//)*
		public Group getGroup() { return cGroup; }
		
		//LessGreaterExp
		public RuleCall getLessGreaterExpParserRuleCall_0() { return cLessGreaterExpParserRuleCall_0; }
		
		//(
		//       {Equals.left=current} '==' right=LessGreaterExp |
		//       {NotEqual.left=current} '!=' right=LessGreaterExp
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{Equals.left=current} '==' right=LessGreaterExp
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_0() { return cEqualsLeftAction_1_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_1() { return cEqualsSignEqualsSignKeyword_1_0_1; }
		
		//right=LessGreaterExp
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//LessGreaterExp
		public RuleCall getRightLessGreaterExpParserRuleCall_1_0_2_0() { return cRightLessGreaterExpParserRuleCall_1_0_2_0; }
		
		//{NotEqual.left=current} '!=' right=LessGreaterExp
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{NotEqual.left=current}
		public Action getNotEqualLeftAction_1_1_0() { return cNotEqualLeftAction_1_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_1_1() { return cExclamationMarkEqualsSignKeyword_1_1_1; }
		
		//right=LessGreaterExp
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//LessGreaterExp
		public RuleCall getRightLessGreaterExpParserRuleCall_1_1_2_0() { return cRightLessGreaterExpParserRuleCall_1_1_2_0; }
	}
	public class LessGreaterExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.LessGreaterExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cLessLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cLessOrEqualLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cGreaterLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cGreaterOrEqualLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		
		//LessGreaterExp returns Exp:
		//    Primary (
		//        {Less.left=current} '<' right=Primary |
		//        {LessOrEqual.left=current} '<=' right=Primary |
		//        {Greater.left=current} '>' right=Primary |
		//        {GreaterOrEqual.left=current} '>=' right=Primary
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (
		//    {Less.left=current} '<' right=Primary |
		//    {LessOrEqual.left=current} '<=' right=Primary |
		//    {Greater.left=current} '>' right=Primary |
		//    {GreaterOrEqual.left=current} '>=' right=Primary
		//)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(
		//       {Less.left=current} '<' right=Primary |
		//       {LessOrEqual.left=current} '<=' right=Primary |
		//       {Greater.left=current} '>' right=Primary |
		//       {GreaterOrEqual.left=current} '>=' right=Primary
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{Less.left=current} '<' right=Primary
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Less.left=current}
		public Action getLessLeftAction_1_0_0() { return cLessLeftAction_1_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_1() { return cLessThanSignKeyword_1_0_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_0_2_0() { return cRightPrimaryParserRuleCall_1_0_2_0; }
		
		//{LessOrEqual.left=current} '<=' right=Primary
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{LessOrEqual.left=current}
		public Action getLessOrEqualLeftAction_1_1_0() { return cLessOrEqualLeftAction_1_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_1_1() { return cLessThanSignEqualsSignKeyword_1_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_2_0() { return cRightPrimaryParserRuleCall_1_1_2_0; }
		
		//{Greater.left=current} '>' right=Primary
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{Greater.left=current}
		public Action getGreaterLeftAction_1_2_0() { return cGreaterLeftAction_1_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_2_1() { return cGreaterThanSignKeyword_1_2_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_2_0() { return cRightPrimaryParserRuleCall_1_2_2_0; }
		
		//{GreaterOrEqual.left=current} '>=' right=Primary
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{GreaterOrEqual.left=current}
		public Action getGreaterOrEqualLeftAction_1_3_0() { return cGreaterOrEqualLeftAction_1_3_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_3_1() { return cGreaterThanSignEqualsSignKeyword_1_3_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_3_2_0() { return cRightPrimaryParserRuleCall_1_3_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumberAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cInputUseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary returns Exp:
		//    {Number}value=INT | type=Type | InputUse
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number}value=INT | type=Type | InputUse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Number}value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{Number}
		public Action getNumberAction_0_0() { return cNumberAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//InputUse
		public RuleCall getInputUseParserRuleCall_2() { return cInputUseParserRuleCall_2; }
	}
	public class InputUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Ui.InputUse");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefInputCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefInputIDTerminalRuleCall_0_1 = (RuleCall)cRefInputCrossReference_0.eContents().get(1);
		
		//InputUse:
		//    ref=[Input]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Input]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[Input]
		public CrossReference getRefInputCrossReference_0() { return cRefInputCrossReference_0; }
		
		//ID
		public RuleCall getRefInputIDTerminalRuleCall_0_1() { return cRefInputIDTerminalRuleCall_0_1; }
	}
	
	
	private final UI23Elements pUI23;
	private final FormElements pForm;
	private final LayoutElements pLayout;
	private final ColumnElements pColumn;
	private final RowElements pRow;
	private final ElementElements pElement;
	private final LabelElements pLabel;
	private final InputElements pInput;
	private final ButtonElements pButton;
	private final TypeElements pType;
	private final ExpElements pExp;
	private final BooleanExpElements pBooleanExp;
	private final EqualityExpElements pEqualityExp;
	private final LessGreaterExpElements pLessGreaterExp;
	private final PrimaryElements pPrimary;
	private final InputUseElements pInputUse;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UiGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUI23 = new UI23Elements();
		this.pForm = new FormElements();
		this.pLayout = new LayoutElements();
		this.pColumn = new ColumnElements();
		this.pRow = new RowElements();
		this.pElement = new ElementElements();
		this.pLabel = new LabelElements();
		this.pInput = new InputElements();
		this.pButton = new ButtonElements();
		this.pType = new TypeElements();
		this.pExp = new ExpElements();
		this.pBooleanExp = new BooleanExpElements();
		this.pEqualityExp = new EqualityExpElements();
		this.pLessGreaterExp = new LessGreaterExpElements();
		this.pPrimary = new PrimaryElements();
		this.pInputUse = new InputUseElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.mdsd.Ui".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UI23: 'title' name=ID form=Form;
	public UI23Elements getUI23Access() {
		return pUI23;
	}
	
	public ParserRule getUI23Rule() {
		return getUI23Access().getRule();
	}
	
	//Form:
	//    'form' name=ID '{' layout=Layout '}'
	//;
	public FormElements getFormAccess() {
		return pForm;
	}
	
	public ParserRule getFormRule() {
		return getFormAccess().getRule();
	}
	
	//Layout:
	//    Column | Row
	//;
	public LayoutElements getLayoutAccess() {
		return pLayout;
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}
	
	//Column:
	//    'column' '{'
	//        elements+=Element+
	//    '}'
	//;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//Row:
	//    'row' '{'
	//        elements+=Element+
	//    '}'
	//;
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//Element:
	//    Label | Input | Button | Layout
	//;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Label:
	//    'label' ':' value=STRING
	//;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Input:
	//    'input' name=ID ':' exp=Exp
	//;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Button:
	//    'button' name=ID ':' value=STRING | {StarButton}'button*' name=ID ':' value=STRING
	//;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//Type:
	//    {StringType} value='string' | {HashStringType} value='#string'  | {NumberType}value='number'
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Exp:
	//    BooleanExp
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//BooleanExp returns Exp:
	//    EqualityExp (
	//        {And.left=current} '&&' right=EqualityExp |
	//        {Or.left=current} '||' right=EqualityExp
	//    )*
	//;
	public BooleanExpElements getBooleanExpAccess() {
		return pBooleanExp;
	}
	
	public ParserRule getBooleanExpRule() {
		return getBooleanExpAccess().getRule();
	}
	
	//EqualityExp returns Exp:
	//    LessGreaterExp (
	//        {Equals.left=current} '==' right=LessGreaterExp |
	//        {NotEqual.left=current} '!=' right=LessGreaterExp
	//    )*
	//;
	public EqualityExpElements getEqualityExpAccess() {
		return pEqualityExp;
	}
	
	public ParserRule getEqualityExpRule() {
		return getEqualityExpAccess().getRule();
	}
	
	//LessGreaterExp returns Exp:
	//    Primary (
	//        {Less.left=current} '<' right=Primary |
	//        {LessOrEqual.left=current} '<=' right=Primary |
	//        {Greater.left=current} '>' right=Primary |
	//        {GreaterOrEqual.left=current} '>=' right=Primary
	//    )*
	//;
	public LessGreaterExpElements getLessGreaterExpAccess() {
		return pLessGreaterExp;
	}
	
	public ParserRule getLessGreaterExpRule() {
		return getLessGreaterExpAccess().getRule();
	}
	
	//Primary returns Exp:
	//    {Number}value=INT | type=Type | InputUse
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//InputUse:
	//    ref=[Input]
	//;
	public InputUseElements getInputUseAccess() {
		return pInputUse;
	}
	
	public ParserRule getInputUseRule() {
		return getInputUseAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
