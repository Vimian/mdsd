/**
 * generated by Xtext 2.33.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.ui.Button;
import dk.sdu.mmmi.mdsd.ui.Column;
import dk.sdu.mmmi.mdsd.ui.Element;
import dk.sdu.mmmi.mdsd.ui.Exp;
import dk.sdu.mmmi.mdsd.ui.Form;
import dk.sdu.mmmi.mdsd.ui.Greater;
import dk.sdu.mmmi.mdsd.ui.HashStringType;
import dk.sdu.mmmi.mdsd.ui.Input;
import dk.sdu.mmmi.mdsd.ui.Label;
import dk.sdu.mmmi.mdsd.ui.Layout;
import dk.sdu.mmmi.mdsd.ui.Row;
import dk.sdu.mmmi.mdsd.ui.StarButton;
import dk.sdu.mmmi.mdsd.ui.StringType;
import dk.sdu.mmmi.mdsd.ui.Type;
import dk.sdu.mmmi.mdsd.ui.UI23;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class UiGenerator extends AbstractGenerator {
  private static int panelNum = 1;

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final UI23 ui23 = Iterators.<UI23>filter(resource.getAllContents(), UI23.class).next();
    final String path = UiGenerator.camelToSnake(ui23.getName());
    UiGenerator.panelNum = 1;
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("user_interface/");
    _builder.append(path);
    _builder.append("/UserInterface.java");
    fsa.generateFile(_builder.toString(), UiGenerator.generateUserinterface(path, ui23));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("user_interface/");
    _builder_1.append(path);
    _builder_1.append("/");
    String _name = ui23.getForm().getName();
    _builder_1.append(_name);
    _builder_1.append("Form.java");
    fsa.generateFile(_builder_1.toString(), UiGenerator.generateForm(path, ui23, ui23.getForm()));
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("user_interface/common/Form.java");
    fsa.generateFile(_builder_2.toString(), UiGenerator.generateCommon());
  }

  public static String generateUserinterface(final String path, final UI23 ui23) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package user_interface.");
    _builder.append(path);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class UserInterface{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public JFrame frame;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void open() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("frame = new JFrame(\"");
    String _name = ui23.getName();
    _builder.append(_name, "        ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);");
    _builder.newLine();
    _builder.append("        ");
    String _name_1 = ui23.getForm().getName();
    _builder.append(_name_1, "        ");
    _builder.append("Form form = new ");
    String _name_2 = ui23.getForm().getName();
    _builder.append(_name_2, "        ");
    _builder.append("Form(this);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("frame.add(form.createPanel());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("frame.pack();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("frame.setVisible(true);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public static String generateForm(final String path, final UI23 ui23, final Form form) {
    String _xblockexpression = null;
    {
      ArrayList<Input> inputs = new ArrayList<Input>();
      ArrayList<Button> buttons = new ArrayList<Button>();
      UiGenerator.checkElements(inputs, buttons, form.getLayout());
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package user_interface.");
      _builder.append(path);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.newLine();
      _builder.append("import javax.swing.*;");
      _builder.newLine();
      _builder.append("import java.awt.event.*;");
      _builder.newLine();
      _builder.append("import user_interface.common.*;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class ");
      String _name = form.getName();
      _builder.append(_name);
      _builder.append("Form extends Form{");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      {
        for(final Input input : inputs) {
          _builder.append("\t");
          _builder.append("public JTextField ");
          String _name_1 = input.getName();
          _builder.append(_name_1, "\t");
          _builder.append("Component;");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        for(final Button button : buttons) {
          _builder.append("\t");
          _builder.append("public JButton ");
          String _name_2 = button.getName();
          _builder.append(_name_2, "\t");
          _builder.append("Component;");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("    ");
      _builder.append("UserInterface parent;");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      String _name_3 = form.getName();
      _builder.append(_name_3, "    ");
      _builder.append("Form(UserInterface parent) {");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("this.parent = parent;");
      _builder.newLine();
      {
        for(final Input input_1 : inputs) {
          _builder.append("        ");
          String _name_4 = input_1.getName();
          _builder.append(_name_4, "        ");
          _builder.append("Component = new JTextField();");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        for(final Button button_1 : buttons) {
          _builder.append("        ");
          String _name_5 = button_1.getName();
          _builder.append(_name_5, "        ");
          _builder.append("Component = new JButton(\"");
          String _value = button_1.getValue();
          _builder.append(_value, "        ");
          _builder.append("\");");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public JPanel createPanel(){");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("return createPanel");
      _builder.append(UiGenerator.panelNum, "        ");
      _builder.append("();");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      String _generateLayout = UiGenerator.generateLayout(form.getLayout(), UiGenerator.panelNum);
      _builder.append(_generateLayout, "\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public boolean checkValidity(){");
      _builder.newLine();
      {
        for(final Input input_2 : inputs) {
          {
            Type _type = input_2.getExp().getType();
            if ((_type instanceof StringType)) {
              _builder.append("        ");
              _builder.append("String ");
              String _name_6 = input_2.getName();
              _builder.append(_name_6, "        ");
              _builder.append(" = this.");
              String _name_7 = input_2.getName();
              _builder.append(_name_7, "        ");
              _builder.append("Component.getText();");
              _builder.newLineIfNotEmpty();
            } else {
              Exp _exp = input_2.getExp();
              if ((_exp instanceof Greater)) {
                {
                  Exp _exp_1 = input_2.getExp();
                  Exp _left = ((Greater) _exp_1).getLeft();
                  if ((_left instanceof HashStringType)) {
                    _builder.append("        ");
                    _builder.append("String ");
                    String _name_8 = input_2.getName();
                    _builder.append(_name_8, "        ");
                    _builder.append(" = this.");
                    String _name_9 = input_2.getName();
                    _builder.append(_name_9, "        ");
                    _builder.append("Component.getText();");
                    _builder.newLineIfNotEmpty();
                    _builder.append("        ");
                    _builder.append("\t");
                    _builder.append("if(!(");
                    Exp _exp_2 = input_2.getExp();
                    Exp _left_1 = ((Greater) _exp_2).getLeft();
                    _builder.append(_left_1, "        \t");
                    _builder.append(".length() > ");
                    Exp _exp_3 = input_2.getExp();
                    Exp _right = ((Greater) _exp_3).getRight();
                    int _value_1 = ((dk.sdu.mmmi.mdsd.ui.Number) _right).getValue();
                    _builder.append(_value_1, "        \t");
                    _builder.append(")){");
                    _builder.newLineIfNotEmpty();
                    _builder.append("        ");
                    _builder.append("    \t");
                    _builder.append("return false;");
                    _builder.newLine();
                    _builder.append("        ");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
          }
        }
      }
      _builder.append("        ");
      _builder.append("return true;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }

  public static void checkElements(final ArrayList inputs, final ArrayList buttons, final Layout layout) {
    EList<Element> _elements = layout.getElements();
    for (final Element element : _elements) {
      if ((element instanceof Input)) {
        inputs.add(element);
      } else {
        if ((element instanceof Button)) {
          buttons.add(element);
        } else {
          if ((element instanceof Layout)) {
            UiGenerator.checkElements(inputs, buttons, ((Layout)element));
          }
        }
      }
    }
  }

  public static String generateLayout(final Layout layout, final int num) {
    String _xblockexpression = null;
    {
      ArrayList<Layout> layouts = new ArrayList<Layout>();
      ArrayList<Integer> panelNums = new ArrayList<Integer>();
      int i = 0;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("public JPanel createPanel");
      _builder.append(num);
      _builder.append("() {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("JPanel panel = new JPanel();");
      _builder.newLine();
      {
        if ((layout instanceof Column)) {
          _builder.append("\t");
          _builder.append("panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));");
          _builder.newLine();
        } else {
          if ((layout instanceof Row)) {
            _builder.append("\t");
            _builder.append("panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));");
            _builder.newLine();
          }
        }
      }
      {
        EList<Element> _elements = layout.getElements();
        for(final Element element : _elements) {
          {
            if ((element instanceof Label)) {
              _builder.append("\t");
              _builder.append("panel.add(new JLabel(\"");
              String _value = ((Label)element).getValue();
              _builder.append(_value, "\t");
              _builder.append("\"));");
              _builder.newLineIfNotEmpty();
            } else {
              if ((element instanceof Layout)) {
                _builder.append("\t");
                UiGenerator.addLayout(((Layout)element), layouts, panelNums);
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("panel.add(createPanel");
                _builder.append(UiGenerator.panelNum, "\t");
                _builder.append("());");
                _builder.newLineIfNotEmpty();
              } else {
                if ((element instanceof Input)) {
                  _builder.append("\t");
                  _builder.append("panel.add(");
                  String _name = ((Input)element).getName();
                  _builder.append(_name, "\t");
                  _builder.append("Component);");
                  _builder.newLineIfNotEmpty();
                } else {
                  if ((element instanceof Button)) {
                    _builder.append("\t");
                    _builder.append("panel.add(");
                    String _name_1 = ((Button)element).getName();
                    _builder.append(_name_1, "\t");
                    _builder.append("Component);");
                    _builder.newLineIfNotEmpty();
                    {
                      if ((element instanceof StarButton)) {
                        String _name_2 = ((StarButton)element).getName();
                        _builder.append(_name_2);
                        _builder.append("Component.addActionListener(new ActionListener(){");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("public void actionPerformed(ActionEvent e){");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("if(checkValidity()){");
                        _builder.newLine();
                        _builder.append("\t    \t");
                        _builder.append("JOptionPane.showMessageDialog(");
                        _builder.newLine();
                        _builder.append("\t    \t\t");
                        _builder.append("parent.frame, ");
                        _builder.newLine();
                        _builder.append("\t            ");
                        _builder.append("\"Data has been saved\");");
                        _builder.newLine();
                        _builder.append("\t    ");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t    ");
                        _builder.append("else {");
                        _builder.newLine();
                        _builder.append("\t    \t");
                        _builder.append("JOptionPane.showMessageDialog(");
                        _builder.newLine();
                        _builder.append("\t    \t\t");
                        _builder.append("parent.frame, ");
                        _builder.newLine();
                        _builder.append("\t    \t\t");
                        _builder.append("\"Validation Error\", ");
                        _builder.newLine();
                        _builder.append("\t    \t\t");
                        _builder.append("\"Error\",");
                        _builder.newLine();
                        _builder.append("\t    \t\t");
                        _builder.append("JOptionPane.ERROR_MESSAGE);");
                        _builder.newLine();
                        _builder.append("\t    ");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("});");
                        _builder.newLine();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      _builder.append("\t");
      _builder.append("return panel;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      {
        for(final Layout layout1 : layouts) {
          String _generateLayout = UiGenerator.generateLayout(layout1, (panelNums.get(i)).intValue());
          _builder.append(_generateLayout);
          _builder.newLineIfNotEmpty();
          String _xblockexpression_1 = null;
          {
            i = (i + 1);
            _xblockexpression_1 = "";
          }
          _builder.append(_xblockexpression_1);
          _builder.newLineIfNotEmpty();
        }
      }
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }

  public static void addLayout(final Layout layout, final ArrayList layouts, final ArrayList panelNums) {
    UiGenerator.panelNum = (UiGenerator.panelNum + 1);
    layouts.add(layout);
    panelNums.add(Integer.valueOf(UiGenerator.panelNum));
  }

  public static String generateCommon() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package user_interface.common;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Form{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract boolean checkValidity();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract JPanel createPanel();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public static String camelToSnake(final String str) {
    String result = "";
    char c = str.charAt(0);
    char _lowerCase = Character.toLowerCase(c);
    String _plus = (result + Character.valueOf(_lowerCase));
    result = _plus;
    for (int i = 1; (i < str.length()); i++) {
      {
        char ch = str.charAt(i);
        boolean _isUpperCase = Character.isUpperCase(ch);
        if (_isUpperCase) {
          result = (result + "_");
          char _lowerCase_1 = Character.toLowerCase(ch);
          String _plus_1 = (result + Character.valueOf(_lowerCase_1));
          result = _plus_1;
        } else {
          result = (result + Character.valueOf(ch));
        }
      }
    }
    return result;
  }
}
